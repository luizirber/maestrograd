1) 
 1.1 - Shell, composto de:
       * interface, motor de inferência e subsistema de explanação
       
       e base de conhecimento, que contém a base de conhecimento geral e
       dados específicos do caso.
 1.2 - Os componentes do shell são independentes do domínio de aplicação, pois 
       são parte do processo reconhece-atua, e a base de conhecimento é
       dependente, pois contém as regras de produção específicas ao domínio. 
 1.3 - O motor de inferência é o responsável pela aplicação do algoritmo de
       busca.
 1.4 - Na base de conhecimento.
 
2)
 2.1 - É a parte responsável pelo controle, composto de interface, motor de 
       inferência e subsistema de explanação.
 2.2 - É dirigido por objetivo. Dado um objetivo tenta reconstruir os passos
       para chegar a ele.
 2.3 - É dirigido por dados. Dados várias informações tenta encontrar um
       objetivo que cumpre-as.

3) Simulando o raciocínio humano, a partir de um objetivo ele analiza as
   conclusões dos fatos, procurando os que casam. A partir das conclusões
   as premissas destas conclusões tornam-se os novos subobjetivos, e o ciclo
   se repete até que todos os subobjetivos sejam provados. É análogo à MCP por
   só analizar a premissa atual, ao invés do espaço de solução inteiro.

4)
 a - O conjunto de conflito é o conjunto das regras que são aplicáveis a DADO,
     ou seja, é o conjunto C.
 
 b - O que define se o processo é determinístico ou não é a sequência de
     escolha das regras. Isso é executado em "selecione alguma regra R,
     do conjunto C". Para ser não-determinístico pode-se escolher esta regra
     aleatoriamente, ao invés de seguir uma regra pré-definida (se o conjunto
     for representado por uma lista, pegar o primeiro da lista, por exemplo).

5)
 5.1 - {N->G}.
 5.2 - {N->5, N->7, N->2, N->3}.

6)
 6.1 - Pode-se utilizar NumeroDaRegra como um acumulador, e a cada
       característica verdadeira incrementá-lo.

        identify(Cao, NumeroDaRegra) :- caracteristica(Cao), 
                                        regra(NumeroDaRegra, 1).
       
       O segundo parâmetro do predicado regra/2 é acumulado ao valor atual
       da regra.

 6.2 - Pode-se colocar isso na definição do predicado regra/2.

 6.3 - Descendentemente, pois quando maior o valor maior a relevância da regra.
 6.4 - Sempre a que tiver maior valor de relevância.
 6.5 - Sim, pois pode ser que um cão tenha menos características que outro, e
       logo seu valor de relevância será menor.
 6.6 - Caso seja eliminada uma característica para determinar uma resposta, se
       exaustivamente não houver um cão com todas as características fornecidas.
       Será necessário adicionar uma medida de confiabilidade, que será
       decrementada se uma característica for eliminada.
 
7)
 7.1 - 
       passaro(albatroz_terreno) :- familia(albatroz), cor(branca).
       passaro(albatroz_PesPretos) :- familia(albatroz), cor(preta).
       passaro(cisne_assobiador) :- familia(cisne), voz(baixa),
                                    voz(musical), voz(chorosa).
       passaro(cisne_tenor) :- familia(cisne), voz(alta), voz(grave).
 7.2 - O programa principal é o predicado go/0 .
 7.3 - Do início até antes de load_kb/0 .
 7.4 - É load_kb/0 o programa que faz o acesso à base de conhecimento.
 7.5 - Os predicados solve/0 são o motor de inferência.
 7.6 - A raiz é passaro(X), sendo X lido na entrada.
 7.7 - É o predicado do/1 .
 7.8 - É o predicado solve/0 .
 7.9 - Em top_goal/1 .
 7.10 - É parte do shell, componente de interface.
 7.11 - É preferível, pois o usuário pode deixar de fornecer informações
        importantes que devem ser deduzidas pelo sistema a fim de achar uma
        resposta aceitável.
 
8) A rede neural tem pouco conhecimento acerca da situação, tendo somente um 
   objetivo. A partir de várias entradas ele se adapta à entrada, ou seja, é
   necessário treiná-la antes de poder utilizá-la.
   Um sistema de produção já contém uma base de conhecimento, e basta usar um
   procedimento de inferência para procurar o objetivo. Não é necessário
   treinamento, mas é possível treinar o sistema a partir das novas entradas
   para melhorá-lo.

9)
 9.1 - Pode-se utilizar o predicado jarras(X,Y), onde X e Y representam a
       quantidade de água nas jarras de 5 litros e 2 litros, respectivamente.

        jarras(X,Y) :- X =< 5,
                       X <= 0,
                       Y =< 2,
                       Y <= 0.

 9.2 -
        conjunto de conflitos de jarras(5, 0):
        { jarras(5,0) -> jarras(3,2), 
          jarras(5,0) -> jarras(0,0)  }
       
 9.3 -
        troca(X,Y) :- X > 0, 
                      jarras(0, Y).
                        
        troca(X,Y) :- Y > 0, 
                      jarras(X, 0).

 9.4 -
        goal :- jarras(4, 1).

