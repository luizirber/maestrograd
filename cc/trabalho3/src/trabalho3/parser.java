
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jun 27 19:48:32 BRT 2007
//----------------------------------------------------

package trabalho3;

import java_cup.runtime.*;
import java.util.*;
import AST.*;

/** CUP v0.10k generated parser.
  * @version Wed Jun 27 19:48:32 BRT 2007
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\003\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\006\004\000\002" +
    "\007\004\000\002\010\004\000\002\011\004\000\002\012" +
    "\005\000\002\013\005\000\002\014\006\000\002\015\003" +
    "\000\002\015\003\000\002\016\004\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\022\004\015\007\012\010\020\011\011\012" +
    "\017\013\022\014\024\016\005\001\002\000\004\002\050" +
    "\001\002\000\004\006\046\001\002\000\026\002\ufff8\004" +
    "\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\016\ufff8\001\002\000\026\002\ufffa\004\ufffa\005" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\016\ufffa\001\002\000\026\002\ufffd\004\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd" +
    "\001\002\000\004\016\045\001\002\000\006\015\027\016" +
    "\026\001\002\000\026\002\ufffc\004\ufffc\005\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\001" +
    "\002\000\026\002\ufff9\004\ufff9\005\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\001\002\000" +
    "\022\004\015\007\012\010\020\011\011\012\017\013\022" +
    "\014\024\016\005\001\002\000\024\002\uffec\004\015\007" +
    "\012\010\020\011\011\012\017\013\022\014\024\016\005" +
    "\001\002\000\004\016\035\001\002\000\004\016\034\001" +
    "\002\000\026\002\ufffe\004\ufffe\005\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\016\ufffe\001\002\000" +
    "\006\015\027\016\026\001\002\000\026\002\ufffb\004\ufffb" +
    "\005\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\016\ufffb\001\002\000\006\015\027\016\026\001\002" +
    "\000\026\002\uffff\004\uffff\005\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\013\uffff\014\uffff\016\uffff\001\002\000\026" +
    "\002\uffef\004\uffef\005\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\016\uffef\001\002\000\026\002\uffee" +
    "\004\uffee\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\016\uffee\001\002\000\022\004\015\007\012" +
    "\010\020\011\011\012\017\013\022\014\024\016\005\001" +
    "\002\000\026\002\ufff1\004\ufff1\005\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\001\002\000" +
    "\022\004\015\007\012\010\020\011\011\012\017\013\022" +
    "\014\024\016\005\001\002\000\026\002\ufff2\004\ufff2\005" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\016\ufff2\001\002\000\026\002\ufff6\004\ufff6\005\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\001\002\000\026\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\001\002" +
    "\000\026\002\uffec\004\015\005\uffec\007\012\010\020\011" +
    "\011\012\017\013\022\014\024\016\005\001\002\000\004" +
    "\002\000\001\002\000\006\002\uffed\005\uffed\001\002\000" +
    "\024\004\015\005\uffec\007\012\010\020\011\011\012\017" +
    "\013\022\014\024\016\005\001\002\000\004\005\043\001" +
    "\002\000\026\002\ufff0\004\ufff0\005\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\001\002\000" +
    "\026\002\ufff3\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\016\ufff3\001\002\000\026\002" +
    "\ufff5\004\ufff5\005\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\016\ufff5\001\002\000\006\015\027\016" +
    "\026\001\002\000\026\002\ufff7\004\ufff7\005\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\026\003\003\004\015\005\024\006\020\007" +
    "\007\010\012\011\022\012\006\013\013\014\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\040\005\024\006\020\007\007\010\012\011\022" +
    "\012\006\013\013\014\005\001\001\000\026\004\035\005" +
    "\024\006\020\007\007\010\012\011\022\012\006\013\013" +
    "\014\005\016\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\031\001\001\000\002" +
    "\001\001\000\004\015\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\030\005\024" +
    "\006\020\007\007\010\012\011\022\012\006\013\013\014" +
    "\005\001\001\000\002\001\001\000\024\004\032\005\024" +
    "\006\020\007\007\010\012\011\022\012\006\013\013\014" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\035\005\024\006\020\007\007\010" +
    "\012\011\022\012\006\013\013\014\005\016\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\035\005" +
    "\024\006\020\007\007\010\012\011\022\012\006\013\013" +
    "\014\005\016\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\046" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_COMANDOS ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*LISTA_COMANDOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_COMANDOS ::= COMANDO LISTA_COMANDOS 
            {
              Vector RESULT = null;
		int cmd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Command cmd1 = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector lista1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                Vector<Command> arrayCommand = new Vector();
                arrayCommand.addElement ( cmd1 );
                if ( lista1 != null) {
                    Enumeration<Command> e = lista1.elements();
                    while ( e.hasMoreElements() )
                        arrayCommand.addElement(e.nextElement());
                }
                RESULT = arrayCommand;
            
              CUP$parser$result = new java_cup.runtime.Symbol(12/*LISTA_COMANDOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALOR ::= NUMERO 
            {
              Value RESULT = null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character numero = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
             RESULT = new Numb( numero );
          
              CUP$parser$result = new java_cup.runtime.Symbol(11/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALOR ::= LETRA 
            {
              Value RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character nome = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
             RESULT = new Variable( nome );
          
              CUP$parser$result = new java_cup.runtime.Symbol(11/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMANDO_COMPOSTO ::= ABRECOLCHETE COMANDO LISTA_COMANDOS FECHACOLCHETE 
            {
              CompositeCommand RESULT = null;
		int cmd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cmd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Command cmd1 = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector lista1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Vector<Command> arrayCommand = new Vector();
                arrayCommand.addElement ( cmd1 );
                if ( lista1 != null) {
                    Enumeration<Command> e = lista1.elements();
                    while ( e.hasMoreElements() )
                        arrayCommand.addElement(e.nextElement());
                }
                RESULT = new CompositeCommand ( arrayCommand );
            
              CUP$parser$result = new java_cup.runtime.Symbol(10/*COMANDO_COMPOSTO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMANDO_ENQUANTO ::= ENQUANTO VALOR COMANDO 
            {
              WhileCommand RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value nome = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cmd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cmd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Command cmd1 = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                RESULT = new WhileCommand( nome, cmd1 );
            
              CUP$parser$result = new java_cup.runtime.Symbol(9/*COMANDO_ENQUANTO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMANDO_SE ::= SE VALOR COMANDO 
            {
              IfCommand RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value nome = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cmd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cmd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Command cmd1 = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                RESULT = new IfCommand( nome, cmd1 );
            
              CUP$parser$result = new java_cup.runtime.Symbol(8/*COMANDO_SE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMANDO_IMPRIME ::= IMPRIMIR VALOR 
            {
              PrintCommand RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Value nome = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                RESULT = new PrintCommand( nome );
            
              CUP$parser$result = new java_cup.runtime.Symbol(7/*COMANDO_IMPRIME*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMANDO_DECREMENTA ::= DECREMENTAR LETRA 
            {
              DecCommand RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character nome = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                RESULT = new DecCommand( nome );
            
              CUP$parser$result = new java_cup.runtime.Symbol(6/*COMANDO_DECREMENTA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COMANDO_INCREMENTA ::= INCREMENTAR LETRA 
            {
              IncCommand RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character nome = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                RESULT = new IncCommand( nome );
            
              CUP$parser$result = new java_cup.runtime.Symbol(5/*COMANDO_INCREMENTA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMANDO_LE ::= LER LETRA 
            {
              ReadCommand RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character nome = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                RESULT = new ReadCommand( nome );
            
              CUP$parser$result = new java_cup.runtime.Symbol(4/*COMANDO_LE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMANDO_ATRIBUI ::= LETRA ATRIBUICAO VALOR 
            {
              AssignCommand RESULT = null;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Character nome = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Value valor = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                Variable variavel = new Variable( nome );
                RESULT = new AssignCommand( variavel, valor );
            
              CUP$parser$result = new java_cup.runtime.Symbol(3/*COMANDO_ATRIBUI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMANDO ::= COMANDO_COMPOSTO 
            {
              Command RESULT = null;
		int compostoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int compostoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CompositeCommand composto = (CompositeCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = composto; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*COMANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMANDO ::= COMANDO_ENQUANTO 
            {
              Command RESULT = null;
		int enquantoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int enquantoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		WhileCommand enquanto = (WhileCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = enquanto; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*COMANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMANDO ::= COMANDO_SE 
            {
              Command RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IfCommand se = (IfCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = se; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*COMANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COMANDO ::= COMANDO_IMPRIME 
            {
              Command RESULT = null;
		int imprimeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int imprimeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PrintCommand imprime = (PrintCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = imprime; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*COMANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMANDO ::= COMANDO_DECREMENTA 
            {
              Command RESULT = null;
		int decrementaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int decrementaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DecCommand decrementa = (DecCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = decrementa; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*COMANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMANDO ::= COMANDO_INCREMENTA 
            {
              Command RESULT = null;
		int incrementaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int incrementaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IncCommand incrementa = (IncCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = incrementa; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*COMANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // COMANDO ::= COMANDO_LE 
            {
              Command RESULT = null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ReadCommand le = (ReadCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = le; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*COMANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // COMANDO ::= COMANDO_ATRIBUI 
            {
              Command RESULT = null;
		int atribuicaoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atribuicaoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AssignCommand atribuicao = (AssignCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = atribuicao; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*COMANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= COMANDO LISTA_COMANDOS 
            {
              Program RESULT = null;
		int cmd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Command cmd1 = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector lista1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                Vector<Command> arrayCommand = new Vector();
                arrayCommand.addElement ( cmd1 );
                if ( lista1 != null) {
                    Enumeration<Command> e = lista1.elements();
                    while ( e.hasMoreElements() )
                        arrayCommand.addElement(e.nextElement());
                }
                RESULT = new Program ( arrayCommand );
            
              CUP$parser$result = new java_cup.runtime.Symbol(1/*PROGRAMA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

